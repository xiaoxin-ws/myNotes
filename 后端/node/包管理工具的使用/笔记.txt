1.控制台清空：clear

2.node代码规范：node遵循CommonJS规范；
3.包的组成：
    1）包结构：用于组织包中的各种文件，
        包含某些特定文件，符合特定结构，就是一个包
            （1）package.json-------描述文件（包的说明书，必须有）
            （2）bin----------------可执行的二进制文件
            （3）lib----------------经过编译后的js代码
            （4）doc----------------文档（说明文档，bug修复文档，版本变更记录文档）
            （5）test---------------一些测试报告
    2）包描述文件：描述包的相关信息，以供外部读取分析

4.如何让一个普通文件夹变成一个包？
        让这个文件夹拥有一个package.json文件就行了，且这里面的内容符合规范
        执行命令npm init
        包名要求（文件夹名）：不能有中文，不能有大写字母，不能与npm仓库上其他包名同名

5.npm与node的关系？
    安装node默认安装npm（npm是node官方出的包管理工具，专门用于包管理）

6.npm命令介绍
    1.初始化：npm init；默认值（npm init -y）
        1.名字
        2.版本
        3.描述
        4.包入口（index.js)
        5.测试
        6.包仓库地址
        7.关键字
        8.作者
        9.开元许可（ISC）
        10.完成（ok）
    2.搜索：  npm search xxxx或者www.npmjs.com
    3.安装：(局部) npm install xxxx --save或npm i xxxx -S
            (全局)npm root -g(或取全局安装路径)npm install xxxx -g
        1.生产依赖：(两者都是就是生产,Dependencies)npm install xxxx --save或npm i xxxx -S
        2.开发依赖：(devDependencies)npm install xxxx --save-dev或者npm install -D

            npm安装模块
            【npm install xxx】利用 npm 安装xxx模块到当前命令行所在目录；
            【npm install -g xxx】利用npm安装全局模块xxx；
            本地安装时将模块写入package.json中：

            【npm install xxx】安装但不写入package.json；
            【npm install xxx –save】 安装并写入package.json的”dependencies”中；
            【npm install xxx –save-dev】安装并写入package.json的”devDependencies”中。
            npm 删除模块
            【npm uninstall xxx】删除xxx模块； 
            【npm uninstall -g xxx】删除全局模块xxx；
    4.移除 npm remove xxx 在node_module删除xxx包 且删除package.json中的声明

    5.换源：
    打开终端 ：
        npm install -g cnpm --registry=https://registry.npm.taobao.org
        官方源：
        # 默认源
        npm config set registry https://registry.npmjs.org
        换源：
        npm config set registry https://registry.npm.taobao.org
        配置后通过以下方法验证是否成功:
        npm config get registry


        yarn的安装:
            下载node.js，使用npm安装
            npm install -g yarn
            查看版本：yarn --version
            安装node.js,下载yarn的安装程序:
            提供一个.msi文件，在运行时将引导您在Windows上安装Yarn
            Yarn 淘宝源安装，分别复制粘贴以下代码行到黑窗口运行即可
            yarn config set registry https://registry.npm.taobao.org -g
            yarn config set sass_binary_site http://cdn.npm.taobao.org/dist/node-sass -g
            yarn的常用命令：
            安装yarn
            npm install -g yarn
            安装成功后，查看版本号：
            yarn --version
            创建文件夹 yarn
            md yarn
            进入yarn文件夹
            cd yarn
            初始化项目
            yarn init // 同npm init，执行输入信息后，会生成package.json文件
            yarn的配置项：
            yarn config list // 显示所有配置项
            yarn config get <key> //显示某配置项
            yarn config delete <key> //删除某配置项
            yarn config set <key> <value> [-g|--global] //设置配置项
            安装包：
            yarn install //安装package.json里所有包，并将包及它的所有依赖项保存进yarn.lock
            yarn install --flat //安装一个包的单一版本
            yarn install --force //强制重新下载所有包
            yarn install --production //只安装dependencies里的包
            yarn install --no-lockfile //不读取或生成yarn.lock
            yarn install --pure-lockfile //不生成yarn.lock
            添加包（会更新package.json和yarn.lock）：

            yarn add [package] // 在当前的项目中添加一个依赖包，会自动更新到package.json和yarn.lock文件中
            yarn add [package]@[version] // 安装指定版本，这里指的是主要版本，如果需要精确到小版本，使用-E参数
            yarn add [package]@[tag] // 安装某个tag（比如beta,next或者latest）
            //不指定依赖类型默认安装到dependencies里，你也可以指定依赖类型：

            yarn add --dev/-D // 加到 devDependencies
            yarn add --peer/-P // 加到 peerDependencies
            yarn add --optional/-O // 加到 optionalDependencies
            //默认安装包的主要版本里的最新版本，下面两个命令可以指定版本：

            yarn add --exact/-E // 安装包的精确版本。例如yarn add foo@1.2.3会接受1.9.1版，但是yarn add foo@1.2.3 --exact只会接受1.2.3版
            yarn add --tilde/-T // 安装包的次要版本里的最新版。例如yarn add foo@1.2.3 --tilde会接受1.2.9，但不接受1.3.0
            发布包

            yarn publish
            移除一个包
            yarn remove <packageName>：移除一个包，会自动更新package.json和yarn.lock
            更新一个依赖
            yarn upgrade 用于更新包到基于规范范围的最新版本
            运行脚本
            yarn run 用来执行在 package.json 中 scripts 属性下定义的脚本
            显示某个包的信息
            yarn info <packageName> 可以用来查看某个模块的最新版本信息
            缓存
            yarn cache
            yarn cache list # 列出已缓存的每个包
            yarn cache dir # 返回 全局缓存位置
            yarn cache clean # 清除缓存
            npm 与 yarn命令比较:
            这里写图片描述

            npm 与 yarn相关问题比较:
            npm模块的依赖:
            npm存在一些历史遗留问题，请看下图：
            这里写图片描述
            比如说你的项目模块依赖是图中描述的，@1.2.1代表这个模块的版本。在你安装A的时候需要安装依赖C和D，很多依赖不会指定版本号，默认会安装最新的版本，这样就会出现问题：比如今天安装模块的时候C和D是某一个版本，而当以后C、D更新的时候，再次安装模块就会安装C和D的最新版本，如果新的版本无法兼容你的项目，你的程序可能就会出BUG，甚至无法运行。这就是npm的弊端，而yarn为了解决这个问题推出了yarn.lock的机制，这是作者项目中的yarn.lock文件。

            yarn.lock文件格式:
            这里写图片描述

            大家会看到，这个文件已经把依赖模块的版本号全部锁定，当你执行yarn install的时候，yarn会读取这个文件获得依赖的版本号，然后依照这个版本号去安装对应的依赖模块，这样依赖就会被锁定，以后再也不用担心版本号的问题了。其他人或者其他环境下使用的时候，把这个yarn.lock拷贝到相应的环境项目下再安装即可。
            注意：这个文件不要手动修改它，当你使用一些操作如yarn add时，yarn会自动更新yarn.lock。
